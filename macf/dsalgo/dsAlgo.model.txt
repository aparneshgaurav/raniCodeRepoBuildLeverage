
fibonacci(n) { 

if n==0 {
return 1 
}
else{
return  n*fibonacci(n-1)
}

}


control list , rest is same . 
do stack via list 
do queue via list 
do double list via list 
do tree via list 
list plus recursion is all it takes 

public LinkedList{

LinkedList next ; 
Integer data ; 

pubilc LinkedList(data){
this.data = data ; 
}

set method for data 
get method for data 
set method for list 
get method for list 

}

insert(head , n,data ) {
temp=head ; 
n=0
while(temp.next!= null ) {
n++;
if( m==n){
nextNode = temp.next ; 
newNode = new LinkedList(data ) ; 
temp.next = newNode; 
newNode.next = nextNode ; 

}

}




package dsAlgo;

public class SingleLinkedList {
	
	
	Integer data ; 
	SingleLinkedList next ; 
	
	public SingleLinkedList(Integer data) {
		this.data = data ; 
	}

	public Integer getData() {
		return data;
	}

	public void setData(Integer data) {
		this.data = data;
	}

	public SingleLinkedList getNext() {
		return next;
	}

	public void setNext(SingleLinkedList next) {
		this.next = next;
	}
	
	
	
	public void traverseNodes(SingleLinkedList head) {
		SingleLinkedList temp = head ; 
		while((temp.getNext()!=null) || (temp.getNext()==null)) {
			System.out.println("data is : "+temp.getData());
			if(temp!=null) {
			temp = temp.getNext();
			}
			if(temp==null) {
				break;
			}
//			System.out.println("data is : "+temp.getData());
		}
	}
	
	public static void main(String[] args) {
		SingleLinkedList newNode = new SingleLinkedList(10);
		SingleLinkedList nextNode = new SingleLinkedList(20);
		newNode.setNext(nextNode);
		nextNode.setNext(null);
		newNode.traverseNodes(newNode);		
		
		
	}

}


/*
 * output is
 * 
 * data is : 10 data is : 20
 */


 ------------------

 in non linear search   for searching you iterate the entire array and try to do the match . 

In sorted array , you keep matching , but if the arary value gets bigger than the value to be matched , in that case , you return -1 

binary search , applicable to searching in sorted data , 

while( low is less than high) 
{
mid = low plus high by 2 
if data is equal to mid , found . 
else if data is less than mid , 
then , high = mid - 1
else if data is more than mid , 
then low = mid + 1

}

check duplicates 

for int i=0 ; i++ , 
for j=i+2; j+++,
if a of i is equal to a of j , 
then duplicate 
and so on .. 

if we improve it , then , 
for int i=0;i++
if a of i is equal to a of i+1

check if in array if two elements sum is equal to element k 
for i -0;i++
for j=i+1;j++

if a of i plus a of j is equal to k . 

Similar above goes for three elements whose sum is equal to k . 
Just that j is i plus 1 , and k is j plus 1 . 



------------------------

<<<<<<< HEAD
theory 
	2 examples 
	covering the breadth 
	it's good approach for ds algo for tomorrow 
	have skeleton also ready 
	like linked list , double linked list skeleton of data elements and methods 


=======

#algos
	recursion
	skeleton
	incremental 
	four of each type and then do more 
	have four written in codes 
	understnadn algo 
	write your own codes 
	algorithms are really very cool on gfg 
	coding i will try and then code it up 
	gfg can be trusted 
	read algo from gfg 
	try it yourself 
	copy code to eclipse 
	run it yourself 
	mergeSort i am doing right now 


ds algo 
		think algo yourself , gfg is very cool here 
		if output isnt' helping you , then run the existing code adn then re write that code yourself at some point of time , preferwably in a clone file . 
>>>>>>> 74db9274d84f175d5ead4926ee96ed1e833d6ff2
