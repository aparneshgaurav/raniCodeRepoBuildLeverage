
thislist = [ "apple" , "bat" ]

for x in thislist:
  print(x)

thislist.reverse()



thisdict  = {
"x" : "xmas"
"y" : "year"
}

car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}

x = car.keys()

for y in x:
  print(y)
  print(car.get(y))



def my_function(parameter):
  print(" function getting executed with this parameter " + parameter)

my_function("Emil")
my_function("Tobias")
my_function("Linus")



 function getting executed with this parameter Emil
 function getting executed with this parameter Tobias
 function getting executed with this parameter Linus


lambdaAsyncExpressionFunctionName = lambda a, b: a * b
print(lambdaAsyncExpressionFunctionName(5, 6))

output is 
30 
-------------------------------------------------------------------------------
##################python codes with output #################################


listHere = ["apple" , "bat"];
print(listHere);
print("looping the list starts *************");
for x in listHere:
    print("list elements are : ")
    print(x)

mapHere = {"a":"apple" , "b":"bat"};
print(mapHere);
print("looping the map starts ***************");
for x in mapHere.keys():
    print("key is "+x)
    print("value for key is "+mapHere.get(x))

variableHere = "aparneshgaurav";
txt = "apple#banana#cherry#orange"
print("looping the splits *************");
splittedArray = txt.split("#")
for x in splittedArray:
    print("printing the splits")
    print(x);
    
print("file read and write operations ***********************")    
#f = open("demofile2.txt", "a")
#f.write("See you soon!")
#f.close()

#open and read the file after the appending:
#f = open("demofile2.txt", "r")
#print(f.read())    
print("execution of the python functions**************")
def doHere(param):
    #print("i am printing the param : "+param);
    for x in param:
        print("printing the param values : "+x);
doHere('ram');
doHere("shyam");
doHere(listHere);
print("execution of the python LAMBDA functions**************")
doModule1 = lambda x,y:x+y ;
print(doModule1(2,3));
doModule2 = lambda x,y : min(x,y);
print(doModule2(7,41));
print(doModule2(7,411));
print(doModule2(71,41));
print(doModule2(711,411));
print(doModule2(7111,41111));
print(doModule2(7111,41));
print(doModule2(7,411));
print(doModule2(71111,41));
print("execution of the MAP Reduce functions **************")

doMapHere = map(doHere,listHere);
print(doMapHere);
print(list(doMapHere));#typecasting to list of the parent object has been done overhere

print("printing the list ****************")
print(listHere);
for x in listHere:
    print(x);


******************************************
output
******************************************
['apple', 'bat']
looping the list starts *************
list elements are : 
apple
list elements are : 
bat
{'a': 'apple', 'b': 'bat'}
looping the map starts ***************
key is a
value for key is apple
key is b
value for key is bat
looping the splits *************
printing the splits
apple
printing the splits
banana
printing the splits
cherry
printing the splits
orange
file read and write operations ***********************
execution of the python functions**************
printing the param values : r
printing the param values : a
printing the param values : m
printing the param values : s
printing the param values : h
printing the param values : y
printing the param values : a
printing the param values : m
printing the param values : apple
printing the param values : bat
execution of the python LAMBDA functions**************
5
7
7
41
411
7111
41
7
41
execution of the MAP Reduce functions **************
<map object at 0x7901bd224be0>
printing the param values : a
printing the param values : p
printing the param values : p
printing the param values : l
printing the param values : e
printing the param values : b
printing the param values : a
printing the param values : t
[None, None]
printing the list ****************
['apple', 'bat']
apple
bat

=== Code Execution Successful ===
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
# Online Python compiler (interpreter) to run Python online.
# Write Python 3 code in this online editor and run it.
import functools;
listHere = ["apple" , "bat"];
print(listHere);
print("looping the list starts *************");
for x in listHere:
    print("list elements are : ")
    print(x)

mapHere = {"a":"apple" , "b":"bat"};
print(mapHere);
print("looping the map starts ***************");
for x in mapHere.keys():
    print("key is "+x)
    print("value for key is "+mapHere.get(x))

variableHere = "aparneshgaurav";
txt = "apple#banana#cherry#orange"
print("looping the splits *************");
splittedArray = txt.split("#")
for x in splittedArray:
    print("printing the splits")
    print(x);
    
print("file read and write operations ***********************")    
#f = open("demofile2.txt", "a")
#f.write("See you soon!")
#f.close()

#open and read the file after the appending:
#f = open("demofile2.txt", "r")
#print(f.read())    
print("execution of the python functions**************")
def doHere(param):
    #print("i am printing the param : "+param);
    for x in param:
        print("printing the param values : "+x);
doHere('ram');
doHere("shyam");
doHere(listHere);
print("execution of the python LAMBDA functions**************")
doModule1 = lambda x,y:x+y ;
print(doModule1(2,3));
doModule2 = lambda x,y : min(x,y);
print(doModule2(7,41));
print(doModule2(7,411));
print(doModule2(71,41));
print(doModule2(711,411));
print(doModule2(7111,41111));
print(doModule2(7111,41));
print(doModule2(7,411));
print(doModule2(71111,41));
print("execution of the MAP  functions **************")

def returnOneForEveryWord(a):
  return 1;
x = map(returnOneForEveryWord, ["apple", "banana", "cherry"])
print(x)
#typecast the object into a list, for readability:
print(list(x))


def returnAppendedHashForEveryWord(a):
  return a+"#";
x = map(returnAppendedHashForEveryWord,["apple", "banana", "cherry"])
print(x)
#typecast the object into a list, for readability:
print(list(x))

def returnAppendedHashForEveryWord(a):
  return a+"#";
x = map(returnAppendedHashForEveryWord, ["apple", "banana", "cherry"])
print(x)
#typecast the object into a list, for readability:
print(list(x))



def returnLengthForEveryWord(a):
  return len(a);
x = map(returnLengthForEveryWord, ["apple", "banana", "cherry"])
print(x)
#typecast the object into a list, for readability:
print(list(x))

print("reduce functions ################");
def computeSum(a,b):
    return (a+b);
listInteger = [1,3 , 10,10,5];
x= functools.reduce(computeSum , listInteger);
print((x));
------------------------------------------------------
******************************************
output
******************************************
['apple', 'bat']
looping the list starts *************
list elements are : 
apple
list elements are : 
bat
{'a': 'apple', 'b': 'bat'}
looping the map starts ***************
key is a
value for key is apple
key is b
value for key is bat
looping the splits *************
printing the splits
apple
printing the splits
banana
printing the splits
cherry
printing the splits
orange
file read and write operations ***********************
execution of the python functions**************
printing the param values : r
printing the param values : a
printing the param values : m
printing the param values : s
printing the param values : h
printing the param values : y
printing the param values : a
printing the param values : m
printing the param values : apple
printing the param values : bat
execution of the python LAMBDA functions**************
5
7
7
41
411
7111
41
7
41
execution of the MAP  functions **************
<map object at 0x7b2e15478220>
[1, 1, 1]
<map object at 0x7b2e15478280>
['apple#', 'banana#', 'cherry#']
<map object at 0x7b2e154781f0>
['apple#', 'banana#', 'cherry#']
<map object at 0x7b2e15478250>
[5, 6, 6]
reduce functions ################
29

=== Code Execution Successful ===
print("split functions ***************");
txt = "hello,my name is Peter,I am 26 years old"
txt = txt.replace("Peter","Gaurav");
x = txt.split(",")
print(x)
print(x[0]);
print(x[1]);
for temp in x:
    print(temp);
******************************************************
output
******************************************************
['apple', 'bat']
looping the list starts *************
list elements are : 
apple
list elements are : 
bat
{'a': 'apple', 'b': 'bat'}
looping the map starts ***************
key is a
value for key is apple
key is b
value for key is bat
looping the splits *************
printing the splits
apple
printing the splits
banana
printing the splits
cherry
printing the splits
orange
file read and write operations ***********************
execution of the python functions**************
printing the param values : r
printing the param values : a
printing the param values : m
printing the param values : s
printing the param values : h
printing the param values : y
printing the param values : a
printing the param values : m
printing the param values : apple
printing the param values : bat
execution of the python LAMBDA functions**************
5
7
7
41
411
7111
41
7
41
execution of the MAP  functions **************
<map object at 0x78d9caeb0220>
[1, 1, 1]
<map object at 0x78d9caeb0280>
['apple#', 'banana#', 'cherry#']
<map object at 0x78d9caeb01f0>
['apple#', 'banana#', 'cherry#']
<map object at 0x78d9caeb0250>
[5, 6, 6]
reduce functions ################
29
split functions ***************
['hello', 'my name is Gaurav', 'I am 26 years old']
hello
my name is Gaurav
hello
my name is Gaurav
I am 26 years old

=== Code Execution Successful ===
---------------------------------------------------------
# Online Python compiler (interpreter) to run Python online.
# Write Python 3 code in this online editor and run it.
print("Try programiz.pro")

varOne = "hello , hwo are you doing , do let me know";
iterableOne = varOne.split(",");
for x in iterableOne:
    print("printing the conctents of the loop ")
    print(x);
    OUTPUT*********************
Try programiz.pro
printing the conctents of the loop 
hello 
printing the conctents of the loop 
 hwo are you doing 
printing the conctents of the loop 
 do let me know

=== Code Execution Successful ===
-------------------------------------------------------------
difference between map and reduce in python functions : 
map was doing processing on each element of the iterable very separately from the other element of that iterable . 
like for apple , bat , cat , it returned apple# , bat# , cat# . 
But for reduce , it did a compute involving all the elements of the iterable , which can be something like sum , min , max ( you may say like aggregate functions over all the elements in that itreable . 
